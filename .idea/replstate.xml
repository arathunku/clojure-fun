<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1429793395918">{:repl-history {:ide [], :local [&quot;(defresource upload-photo\n  :handle-ok \&quot;upload photo\&quot;\n  :available-media-types [\&quot;application/json\&quot;])&quot; &quot;(defn index\n  [_]\n  (layout/common\n    [:div {:class \&quot;photos-list\&quot;}\n     [:h1 \&quot;List of added photos, someday\&quot;]\n     (form-to {:post \&quot;/photos\&quot; :enc-type \&quot;multiplart/form-data\&quot;}\n      (label \&quot;photo\&quot; \&quot;Photo:\&quot;)\n      [:input {:name \&quot;photo\&quot; :type \&quot;file\&quot; :size \&quot;20\&quot;}]\n      (submit-button \&quot;Add photo\&quot; ))]))&quot; &quot;(defn index\n  [_]\n  (layout/common\n    [:div {:class \&quot;photos-list\&quot;}\n     [:h1 \&quot;List of added photos, someday\&quot;]\n     (form-to [:post \&quot;/photos\&quot; :enc-type \&quot;multiplart/form-data\&quot;]\n      (label \&quot;photo\&quot; \&quot;Photo:\&quot;)\n      [:input {:name \&quot;photo\&quot; :type \&quot;file\&quot; :size \&quot;20\&quot;}]\n      (submit-button \&quot;Add photo\&quot; ))]))&quot; &quot;[:div {:class \&quot;photos-list\&quot;}\n     [:h1 \&quot;List of added photos, someday\&quot;]\n     (form-to [:post \&quot;/photos\&quot; :enc-type \&quot;multiplart/form-data\&quot;]\n      (label \&quot;photo\&quot; \&quot;Photo:\&quot;)\n      [:input {:name \&quot;photo\&quot; :type \&quot;file\&quot; :size \&quot;20\&quot;}]\n      (submit-button \&quot;Add photo\&quot; ))]&quot; &quot;(layout/common\n    [:div {:class \&quot;photos-list\&quot;}\n     [:h1 \&quot;List of added photos, someday\&quot;]\n     (form-to [:post \&quot;/photos\&quot; :enc-type \&quot;multiplart/form-data\&quot;]\n      (label \&quot;photo\&quot; \&quot;Photo:\&quot;)\n      [:input {:name \&quot;photo\&quot; :type \&quot;file\&quot; :size \&quot;20\&quot;}]\n      (submit-button \&quot;Add photo\&quot; ))])&quot; &quot;(defresource upload-photo\n  :allowed-methods [:post]\n  :available-media-types [\&quot;text/html\&quot;]\n  :post! handle-photo-upload\n  :post-redirect? true\n  :location (fn [ctx] \&quot;/photos\&quot;))&quot; &quot;(defroutes photos-routes\n  (GET \&quot;/photos\&quot; request photos-list)\n  (POST \&quot;/photos\&quot; request upload-photo))&quot; &quot;(defn handle-photo-upload\n  [ctx]\n  (dosync\n    (let [photo (slurp (get-in ctx [:request :photo]))]\n      (cond\n        (empty? photo) {}\n        :else\n        (io/upload-file \&quot;/tmp/\&quot; photo)))))&quot; &quot;(defn handle-photo-upload [filename file]\n  (dosync\n    (if (empty? filename)\n      {}\n      (io/upload-file \&quot;/tmp/\&quot; file :create-path? true))))&quot; &quot;(defresource upload-photo [{:keys [filename] :as file }]\n  :allowed-methods [:post]\n  :available-media-types [\&quot;text/html\&quot; \&quot;application/json \&quot;]\n  :post! (fn [_] handle-w photo-upload filename file)\n  :post-redirect? true\n  :location (fn [ctx] \&quot;/photos\&quot;))&quot; &quot;(defn handle-photo-upload [file ctx]\n  (dosync\n      (let [{:keys [filname] (:request ctx)}]\n        (if (not (empty? filename))\n          println \&quot;HANDLE FILE UPLOAD\&quot;))) )&quot; &quot;(defresource photos-list\n  :allowed-methods [:get]\n  :handle-ok photos-list-view/index\n  :available-media-types [\&quot;text/html\&quot;])&quot; &quot;(defn handle-photo-upload [file ctx]\n  (dosync\n      (let [{:keys [filname] (:request ctx)}]\n        (if (not (empty? filename))\n          println \&quot;HANDLE FILE UPLOAD\&quot;))))&quot; &quot;drop&quot; &quot;()&quot; &quot;(defn handle-photo-upload\n  [ctx]\n  (dosync\n    (let [photo (slurp (get-in ctx [:request :photo]))]\n      (io/upload-file \&quot;/tmp/\&quot; photo))))&quot; &quot;(ns photouploader.routes.photos\n  (:require [compojure.core :refer :all]\n            [photouploader.views.photos.index :as photos-list-view]\n            [liberator.core\n             :refer [defresource resource request-method-in]]\n            [noir.io :as io]))&quot; &quot;(use 'guestbook.repl)&quot; &quot;(+ 2 2)&quot; &quot;[&amp; [name message error]]&quot; &quot;:h1&quot; &quot;(show-guest)&quot; &quot;(use 'guessbook.routes.home)&quot; &quot;(defn read-guests []\n  (sql/with-connection\n    db\n    (sql/with-query-results res\n      [\&quot;SELECT id, timestamp, name, message FROM guestbook ORDER BY timestamp DESC\&quot;]\n      (doall res))))&quot; &quot;(use 'guestbook.routes.db)&quot; &quot;t-&quot; &quot;(defn home [&amp; [name message error]]\n  (println \&quot;WORKS\&quot;)\n  (break (inc 1))\n  (layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))))&quot; &quot;(wtf?)&quot; &quot;(wtf)&quot; &quot;(locals)&quot; &quot;(h)&quot; &quot;(show-guests)&quot; &quot;(use :reload 'guestbook.routes.home)&quot; &quot;in&quot; &quot;println&quot; &quot;println \&quot;WORKS\&quot;&quot; &quot;(+ 2 1\n   )&quot; &quot;layout&quot; &quot;cond&quot; &quot;show-guests&quot; &quot;(println \&quot;WORKS\&quot;)&quot; &quot;[:br]&quot; &quot;(use 'guestbook.routes.home)&quot; &quot;(defn home [&amp; [name message error]]\n  (println \&quot;WORKS\&quot;)\n  (layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))))&quot; &quot;\&quot;WORKS\&quot;&quot; &quot;message&quot; &quot;(db/save-message name message)&quot; &quot;\&quot;guestbook\&quot;&quot; &quot;\&quot;WORKS!!!\&quot;&quot; &quot;(defn home [&amp; [name message error]]\n  (println \&quot;WORKS!!!\&quot;)\n  (layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   asdad\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))))&quot; &quot;(defn home [&amp; [name message error]]\n  (println \&quot;WORKS!!!\&quot;)\n  (layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))))&quot; &quot;(defn save-message [name message]\n  (cond\n   (empty? name)\n   (home name message \&quot;Name left behind\&quot;)\n   (empty? message)\n   (home name message \&quot;message left behind\&quot;)\n   :else\n   (do\n     (db/save-message name message)\n     (resp/redirect \&quot;/\&quot;))))&quot; &quot;(defn show-guests []\n  [:ul.guests\n   (for [ { :keys [message name timestamp ]} (db/read-guests)]\n         [:li\n          [:blockquote message]\n          [:p \&quot;-\&quot; [:cite name]]\n          [:time (format-timestamp timestamp)]])])&quot; &quot;(defn format-timestamp [timestamp]\n  (-&gt; \&quot;dd/MM/yyyy\&quot;\n      (java.text.SimpleDateFormat.)\n      (.format timestamp)))&quot; &quot;(defn control [field name text]\n  (list (label name text)\n        (field name)\n        [:br]))&quot; &quot;\&quot;screen name\&quot;&quot; &quot;[:post \&quot;/register\&quot;]&quot; &quot;(control text-field :id \&quot;screen name\&quot;)&quot; &quot;home&quot; &quot;(defroutes home-routes\n           (GET \&quot;/\&quot; [] (home))\n           (POST \&quot;/messages\&quot; [name message] (save-message name message)))&quot; &quot;(home)&quot; &quot;(println \&quot;WORKS!!!!\&quot;)&quot; &quot;[:p error]&quot; &quot;[:p \&quot;guestbook\&quot;]&quot; &quot;\&quot;comment\&quot;&quot; &quot;(submit-button \&quot;comment\&quot;)&quot; &quot;(layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;)))&quot; &quot;(form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))&quot; &quot;(defn home [&amp; [name message error]]\n  (println \&quot;WORKS!!!!\&quot;)\n  (layout/common\n   [:h1 \&quot;Hello World!!!\&quot;]\n   [:p \&quot;guestbook\&quot;]\n   [:p error]\n\n   (show-guests)\n   [:hr]\n   (form-to [:post \&quot;/messages\&quot;]\n     [:p \&quot;Name:\&quot;]\n     (text-field \&quot;name\&quot; name)\n     [:p \&quot;Message\&quot;]\n     (text-area {:rows 10 :cols 40} \&quot;message\&quot; message)\n     [:br]\n     (submit-button \&quot;comment\&quot;))))&quot; &quot;(str \n  (str \&quot;foo\&quot; \&quot;bar\&quot;) \&quot;zoo\&quot;)&quot; &quot;(-&gt; \&quot;foo\&quot;\n    (str \&quot;bar\&quot;)\n    (str \&quot;zoo\&quot;))&quot; &quot;(str \&quot;foo\&quot; \&quot;bar\&quot;)&quot; &quot;(str (str \&quot;foo\&quot; \&quot;bar\&quot;) \&quot;zoo\&quot;)&quot; &quot;(-&gt;&gt; \&quot;foo\&quot;\n    (str \&quot;bar\&quot;)\n    (str \&quot;zoo\&quot;))&quot; &quot;(use 'guestbook.routes.auth)&quot; &quot;(defn registration-page []\n  (layout/common\n    (form-to [:post \&quot;/register\&quot;]\n             (control text-field :id \&quot;screen name\&quot;)\n             (control password-field :password \&quot;password\&quot;)\n             (control password-field :password-confirmation \&quot;Retype password\&quot;))))&quot; &quot;text&quot; &quot;(label name text)&quot; &quot;registration-page&quot; &quot;(registration-page)&quot; &quot;(+ 2 1)&quot; &quot;(use photouploader.repl)&quot; &quot;(use 'photouploader.routes.home)&quot; &quot;(defresource home\n  :handle-ok \&quot;hello!\&quot;\n  :etag \&quot;home-etag\&quot;\n  :available-media-types [\&quot;text/plain\&quot;])&quot; &quot;(defresource home\n  :service-available? false\n  :handle-ok \&quot;hello!\&quot;\n  :etag \&quot;home-etag\&quot;\n  :available-media-types [\&quot;text/plain\&quot;])&quot; &quot;(defroutes home-routes\n  (ANY \&quot;/\&quot; request home))&quot; &quot;(defresource home\n  :service-available? false\n  :handle-ok \&quot;hello!!!!!\&quot;\n  :available-media-types [\&quot;text/plain\&quot;])&quot; &quot;(defn index\n  [_]\n  (layout/common\n    [:div {:class \&quot;photos-list\&quot;}\n     [:h1 \&quot;List of added photos, someday\&quot;]\n     [form-to {:post \&quot;/photos\&quot; :enc-type \&quot;multiplart/form-data\&quot;}\n      [label \&quot;photo\&quot; \&quot;Photo:\&quot;]\n      [:input {:name \&quot;photo\&quot; :type \&quot;file\&quot; :size \&quot;20\&quot;}]\n      [submit-button \&quot;Add photo\&quot;]]]))&quot; &quot;(defresource photos-list\n  :handle-ok photos-list-view/index\n  :available-media-types [\&quot;text/html\&quot;])&quot; &quot;(use 'photouploader.views.photos.index)&quot; &quot;(defresource upload-photo [{:keys [filename] :as file }]\n  :allowed-methods [:post]\n  :available-media-types [\&quot;text/html\&quot; \&quot;application/json \&quot;]\n  :post! (fn [_] handle-photo-upload filename file)\n  :post-redirect? true\n  :location (fn [ctx] \&quot;/photos\&quot;))&quot; &quot;(server-top)&quot; &quot;(server-\n  stop)&quot; &quot;(server-stop)&quot; &quot;(defn handle-photo-upload [file ctx]\n  (println \&quot;GR!!!A\&quot;)\n  (if (not (eGmpty? file))\n    println \&quot;GRA\&quot;))&quot; &quot;(use 'photouploader.repl :reload)&quot; &quot;eve &quot; &quot;(start-server)&quot; &quot;(use 'photouploader.repl)&quot; &quot;\n(start-server)&quot; &quot;(stop-server)&quot;], :remote []}}</component>
</project>